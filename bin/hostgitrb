#!/usr/bin/env ruby

require 'logger'
require 'ftools'
require File.join(File.dirname(__FILE__), '..', 'vendor', 'trollop.rb')

LOG_TOGGLE_FILE = File.expand_path('~/.hostgitrb.log.enabled')
DEBUG_TOGGLE_FILE = File.expand_path('~/.hostgitrb.debug.enabled')

logging_on = File.exists? LOG_TOGGLE_FILE
debugging_on = File.exists? DEBUG_TOGGLE_FILE

toggle_log_phrase = logging_on ? 'Disable' : 'Enable'
toggle_debug_phrase = debugging_on ? 'Disable' : 'Enable'

opts = Trollop.options do
  opt :file, 'Set path to public ssh key file', :default => ''
  opt :key, 'Provide public ssh key as a string', :default => ''
  opt :dir, 'Set full path to directory with git repositories to allow access to', :default => ''
  opt :readonly, 'Set access to repositories in --dir to read only', :default => false
  opt :nobackup, 'Don\'t make backup of authorized_keys file', :default => false
  opt :authorizedkeys, 'Set authorized_keys file', :default => File.expand_path('~/.ssh/authorized_keys')
  opt :toggle_log, toggle_log_phrase + ' error logging to file ~/.hostgitrb.log', :default => false
  opt :toggle_debug, toggle_debug_phrase + ' verbose debug logging to ~/.hostgitrb.log', :default => false
end

def logging_toggle(is_enabled, toggle_file)
  if is_enabled
    system "rm #{toggle_file}" if File.exists?(toggle_file)
  else
    File.open(toggle_file, 'w').close
  end
end

if opts[:toggle_log]
  logging_toggle(logging_on, LOG_TOGGLE_FILE)
  puts "Logging has been switched #{logging_on ? 'OFF' : 'ON'}. Exiting..."
  exit
end

if opts[:toggle_debug]
  logging_toggle(debugging_on, DEBUG_TOGGLE_FILE)
  puts "Debugging has been switched #{debugging_on ? 'OFF' : 'ON'}. Exiting..."
  exit
end

Trollop::die 'Invalid directory' unless File.directory?(opts[:dir])
Trollop::die 'No public ssh key provided' if opts[:key] == '' && !File.exists?(opts[:file])

if File.exists?(opts[:file]) then
  ssh_key = File.readlines(opts[:file])[0]
else
  ssh_key = opts[:key]
end

if File.exists?(opts[:authorizedkeys]) && !opts[:nobackup] then
  backup_file = opts[:authorizedkeys] + '.backup'
  count = 2
  while(File.exists?(backup_file)) do
    backup_file = opts[:authorizedkeys] + ".backup#{count}"
    count += 1
  end
  File.copy(opts[:authorizedkeys], backup_file)
end

only_git_cmd = File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'only_git.rb')) + " --dir #{opts[:dir]}"
only_git_cmd << " --readonly" if opts[:readonly]

ssh_inf =  "\n" if File.exists?(opts[:authorizedkeys]) && File.readlines(opts[:authorizedkeys]).last != "\n"
ssh_inf << "#\n"
ssh_inf << "# only_git: #{opts[:readonly] ? 'Read-only' : 'R/W'} access to #{opts[:dir]}\n"
ssh_inf << "#\n"

ssh_cmd = "command=\"#{only_git_cmd}\",no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty #{ssh_key}"

File.open(opts[:authorizedkeys], 'a') { |f| f.write(ssh_inf + ssh_cmd) }
